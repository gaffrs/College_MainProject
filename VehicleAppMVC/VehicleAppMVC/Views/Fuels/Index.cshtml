@model IEnumerable<VehicleAppMVC.Models.Fuel>

    <table class="table-condensed" width="350" align="right" style="background-color :lightslategray">
        <tr>
            <th>
                Fuel statistics
            </th>
        </tr>
        <tr>
            <th></th>
            <th>
                Total
            </th>

            <th>
                Average
            </th>

            <th>
                Highest @*Max*@
        </th>
        <th>
            Lowest @*Min*@
        </th>

    <tr>
        <th>
            Cost
            @(@Model.FirstOrDefault() == null ? "" : @Model.Select(x => x.Vehicle.Consumption[0]).FirstOrDefault().ToString())
            :
        </th>
        <th>
            @*CG: Calculate Total Cost for the View*@
            @Model.Sum(x => x.FuelCost)
        </th>

        <th>
            @*CG: Calculate Average Cost for the View*@
            @(@Model.FirstOrDefault() == null ? "" : @Model.Select(x => x.FuelCost).Average().ToString("#.##"))         @*OR*@ @*Average Cost: €@((Model.Sum(x => x.FuelCost) / Model.Count()))*@
        </th>

        <th>
            @*CG: Calculate Max Cost for the View*@
            @(@Model.FirstOrDefault() == null ? "" : @Model.Select(x => x.FuelCost).Max().ToString("#.##"))
        </th>

        <th>
            @*CG: Calculate Min Cost for the View*@
            @(@Model.FirstOrDefault() == null ? "" : @Model.Select(x => x.FuelCost).Min().ToString("#.##"))
        </th>
    </tr>

    <tr>
        <th>
            Unit Price
            @(@Model.FirstOrDefault() == null ? "" : @Model.Select(x => x.Vehicle.Consumption[0]).FirstOrDefault().ToString())
            :
        </th>
        <th>
        </th>
        <th>
            @*CG: Calculate Average Cost for the View*@
            @(@Model.FirstOrDefault() == null ? "" : @Model.Select(x => x.FuelUnitPrice).Average().ToString("#.##"))         @*OR*@ @*Average Cost: €@((Model.Sum(x => x.FuelCost) / Model.Count()))*@
        </th>

        <th>
            @*CG: Calculate Max Cost for the View*@
            @(@Model.FirstOrDefault() == null ? "" : @Model.Select(x => x.FuelUnitPrice).Max().ToString("#.##"))
        </th>

        <th>
            @*CG: Calculate Min Cost for the View*@
            @(@Model.FirstOrDefault() == null ? "" : @Model.Select(x => x.FuelUnitPrice).Min().ToString("#.##"))
        </th>
    </tr>

    <tr>
        <th>
            Consumption 
            @(@Model.FirstOrDefault() == null ? "" : @Model.Select(x => x.Vehicle.Consumption[3]).FirstOrDefault().ToString())
            :
        </th>
        <th>
        </th>

        <th>
            @*CG: Calculate Average Cost for the View*@
            @(@Model.FirstOrDefault() == null ? "" : @Model.Where(x => x.FuelConsumption > 0).Select(x => x.FuelConsumption).DefaultIfEmpty(0).Average().ToString("#.##"))       @*OR*@ @*Average Cost: €@((Model.Sum(x => x.FuelCost) / Model.Count()))*@
        </th>
        
        <th>
            @*CG: Calculate Max Cost for the View*@
            @(@Model.FirstOrDefault() == null ? "" : @Model.Where(x => x.FuelConsumption > 0).Select(x => x.FuelConsumption).DefaultIfEmpty(0).Max().ToString("#.##"))     
        </th>

        <th>
            @*CG: Calculate Min Cost for the View*@
            @(@Model.FirstOrDefault() == null ? "" : @Model.Where(x => x.FuelConsumption > 0).Select(x => x.FuelConsumption).DefaultIfEmpty(0).Min().ToString("#.##"))      
        </th>
    </tr>
    <tr></tr>
</table>

 

@{
                ViewBag.Title = "Fuel-fill Log";
            }

<h2> @ViewBag.Title </h2>


<p>
    @Html.ActionLink("Add Fuel-fill", "Create")
</p>



@*Search fields*@
@using (Html.BeginForm())
{
    <p>
        @Html.TextBox("SearchString")
        <input type="submit" value="Search by Registration/Year" />
    </p>
    <p>
        @Html.TextBox("StartDate", "Start Date", new { @class = "date-picker" })  @Html.TextBox("FinishDate", "Finish Date", new { @class = "date-picker" })
        <input type="submit" value="Search by Date Range" />
    </p>
}

<p><em> NOTE: A FULL tank of fuel is required to initiate consumption calculations. Consumption results will ONLY get displayed on subsequent fill-ups </em></p> 

<table class="table">
    @*New for sorting*@
    <tr>
        <th>
            @Html.ActionLink("Vehicle Registration", "Index", new { sortOrder = ViewBag.NameSortParmReg })      @*CG: Edited*@
            @*@Html.DisplayNameFor(model => model.Vehicle.ApplicationUserId)*@
        </th>

        <th>
            @Html.ActionLink("Fuel Date", "Index", new { sortOrder = ViewBag.DateSortParmDate })
        </th>
        @*
            <th>
                @Html.DisplayNameFor(model => model.FuelDate)
            </th>
        *@
        <th>
            @Html.DisplayNameFor(model => model.FuelOdometerMileage)
            @(@Model.FirstOrDefault() == null ? "" : @Model.Select(x => x.Vehicle.Consumption[1]).FirstOrDefault().ToString())
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FuelQuantity)
            @(@Model.FirstOrDefault() == null ? "" :@Model.Select(x => x.Vehicle.Consumption[2]).FirstOrDefault().ToString())
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FuelUnitPrice)
            @(@Model.FirstOrDefault() == null ? "" :@Model.Select(x => x.Vehicle.Consumption[0]).FirstOrDefault().ToString())
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FuelCost)
            @(@Model.FirstOrDefault() == null ? "" :@Model.Select(x => x.Vehicle.Consumption[0]).FirstOrDefault().ToString())
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FuelPartialFill)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FuelConsumption)
            @(@Model.FirstOrDefault() == null ? "" :@Model.Select(x => x.Vehicle.Consumption[3]).FirstOrDefault().ToString())
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
            {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Vehicle.VehicleRegistrationNumber)       @*CG: Edited*@
                @*@Html.DisplayFor(modelItem => item.Vehicle.ApplicationUserId)*@
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FuelDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FuelOdometerMileage) 
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FuelQuantity) 
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FuelUnitPrice) 
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FuelCost)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FuelPartialFill)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.FuelConsumption)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.FuelID }) |
                @Html.ActionLink("Details", "Details", new { id = item.FuelID }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.FuelID })
            </td>
        </tr>
    }

</table>




@*Trying to show what the users current settings are*@
@*

    @using Microsoft.AspNet.Identity

    <dt>
        @Html.DisplayNameFor(model => model.Vehicle.ApplicationUser.VehicleUnit)
    </dt>
    <dt>
        @Html.DisplayFor(dbo.User.Identity.GetUserName())
    </dt>
*@



@*Fuel Consumptions Graph*@

<div id="myArrayCostsConsumptions" style="display:none">
    @{
        if (Model.Count() > 0)  //to overcome issue when model has No Values && Consumption is NOT = 0
        {
            var myArrCosts = "";
            var arrayListCosts = Model.OrderBy(i => i.FuelDate).Where(i => i.FuelConsumption >0).Select(i => i.FuelConsumption).ToArray();
            foreach (var item in arrayListCosts)
            {
                myArrCosts += @item.ToString() + ",";
            }

            myArrCosts = myArrCosts != "" ? myArrCosts.Substring(0, myArrCosts.Length - 1) + "": null;
            @Html.DisplayFor(m => myArrCosts);
        }
    }
</div>


<div id="myArrayDatesConsumptions" style="display:none">
    @{
        if (Model.Count() > 0)  //to overcome issue when model has No Values && Consumption is NOT = 0
        {
            var myArrDates = "";
            var arrayListDates = Model.OrderBy(i => i.FuelDate).Where(i => i.FuelConsumption > 0).Select(i => i.FuelDate).ToArray();
            foreach (var item in arrayListDates)
            {
                myArrDates += @item.ToShortDateString().ToString() + ",";
            }
            myArrDates = myArrDates != "" ? myArrDates.Substring(0, myArrDates.Length - 1) + "" : null;
            @Html.DisplayFor(m => myArrDates);
        }
    }
</div>

<div id="myArrayRegConsumptions" style="display:none">
    @{
        if (Model.Count() > 0) //to overcome issue when model has No Values && Consumption is NOT = 0
        {
            var myArrReg = "";
            var arrayListReg = Model.OrderBy(i => i.FuelDate).Select(i => i.Vehicle.VehicleRegistrationNumber).Distinct().ToArray();     //Distinct used to select dinstinct Vehicles
            foreach (var item in arrayListReg)
            {
                myArrReg += @item.ToString() + ",";
            }
            myArrReg = myArrReg != "" ? myArrReg.Substring(0, myArrReg.Length - 1) + "" : null;
            @Html.DisplayFor(m => myArrReg);
        }
    }
</div>



@*Graphs to ONLY be seen by paid users*@
@if (Model.FirstOrDefault().StripeToken != null)
{
<canvas id="myChartConsumptions" width="400" height="150"></canvas>
<script>
        /*
                var colmArray = new Array()
                colmArray.push(100);
                colmArray.push(1000);

                 var description = new Array();
                description.push('a');
                 description.push('b');
                 */

        //Takes the CostRunningCost list and splits them out into an array list
        var mycostArr = new Array();
        costValues = $('#myArrayCostsConsumptions').text();
        mycostArr = costValues.split(",");

        //Takes the CostDate list and splits them out into an array list
        var mydateArr = new Array();
        dateValues = $('#myArrayDatesConsumptions').text();
        mydateArr = dateValues.split(",");

        //Takes the VehicleRegistrationNumber list and splits them out into an array list
        var myregArr = new Array();
        regValues = $('#myArrayRegConsumptions').text();
        myregArr = regValues.split(",");


        var ctx = "myChartConsumptions";
        @*var ctx = document.getElementById("myChart");*@
        var myChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: mydateArr,
                datasets: [{
                    label: myregArr,
                    data: mycostArr,
                    backgroundColor: [
                                'rgba(255, 99, 132, 0.2)',
                                'rgba(54, 162, 235, 0.2)',
                                'rgba(255, 206, 86, 0.2)',
                                'rgba(75, 192, 192, 0.2)',
                                'rgba(153, 102, 255, 0.2)',
                                'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                                'rgba(255,99,132,1)',
                                'rgba(54, 162, 235, 1)',
                                'rgba(255, 206, 86, 1)',
                                'rgba(75, 192, 192, 1)',
                                'rgba(153, 102, 255, 1)',
                                'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            },


            options: {
                legend: { labels: { fontColor: "#E5E4E2"} },
                title: { display: true, text: 'Fuel Consumptions', fontColor: "#E5E4E2", fontSize: 18 },

                scales: {

                    yAxes: [
                        {
                            id: 'y-axis-1',
                            display: true,
                            position: 'left',
                            ticks: {
                                fontColor: "#E5E4E2"
                            },
                            scaleLabel:{
                                display: true,
                                labelString: 'Fuel Consumption',
                                fontColor: "#E5E4E2"
                            }

                        }
                    ],

                   xAxes: [
                        {
                            id: 'x-axis-1',
                            display: true,
                            position: 'bottom',
                            ticks: {
                                fontColor: "#E5E4E2"
                            },
                            scaleLabel:{
                                display: true,
                                labelString: 'Date',
                                fontColor: "#E5E4E2"
                            }
                        }
                    ],
                }
            }
        });

</script>
}

@*Fuel Unit Price Graph*@

<div id="myArrayCostsFuelUnitPrice" style="display:none">
    @{
        if (Model.Count() > 0)      //to overcome issue when model has No Values
        {
            var myArrCosts = "";
            var arrayListCosts = Model.OrderBy(i => i.FuelDate).Select(i => i.FuelUnitPrice).ToArray();
            foreach (var item in arrayListCosts)
            {
                myArrCosts += @item.ToString() + ",";
            }

            myArrCosts = myArrCosts.Substring(0, myArrCosts.Length - 1) + "";
            @Html.DisplayFor(m => myArrCosts);
        }
    }
</div>


<div id="myArrayDatesFuelUnitPrice" style="display:none">
    @{
        if (Model.Count() > 0)      //to overcome issue when model has No Values
        {
            var myArrDates = "";
            var arrayListDates = Model.OrderBy(i => i.FuelDate).Select(i => i.FuelDate).ToArray();
            foreach (var item in arrayListDates)
            {
                myArrDates += @item.ToShortDateString().ToString() + ",";
            }
            myArrDates = myArrDates.Substring(0, myArrDates.Length - 1) + "";
            @Html.DisplayFor(m => myArrDates);
        }
    }
</div>

<div id="myArrayRegFuelUnitPrice" style="display:none">
    @{
        if (Model.Count() > 0)      //to overcome issue when model has No Values
        {
            var myArrReg = "";
            var arrayListReg = Model.OrderBy(i => i.FuelDate).Select(i => i.Vehicle.VehicleRegistrationNumber).Distinct().ToArray();     //Distinct used to select dinstinct Vehicles
            foreach (var item in arrayListReg)
            {
                myArrReg += @item.ToString() + ",";
            }
            myArrReg = myArrReg.Substring(0, myArrReg.Length - 1) + "";
            @Html.DisplayFor(m => myArrReg);
        }
    }
</div>



@*Graphs to ONLY be seen by paid users*@
@if (Model.FirstOrDefault().StripeToken != null)
{
<canvas id="myChartFuelUnitPrice" width="400" height="150"></canvas>
<script>
            /*
                    var colmArray = new Array()
                    colmArray.push(100);
                    colmArray.push(1000);

                     var description = new Array();
                    description.push('a');
                     description.push('b');
                     */

            //Takes the CostRunningCost list and splits them out into an array list
            var mycostArr = new Array();
            costValues = $('#myArrayCostsFuelUnitPrice').text();
            mycostArr = costValues.split(",");

            //Takes the CostDate list and splits them out into an array list
            var mydateArr = new Array();
            dateValues = $('#myArrayDatesFuelUnitPrice').text();
            mydateArr = dateValues.split(",");

            //Takes the VehicleRegistrationNumber list and splits them out into an array list
            var myregArr = new Array();
            regValues = $('#myArrayRegFuelUnitPrice').text();
            myregArr = regValues.split(",");


            var ctx = "myChartFuelUnitPrice";
            @*var ctx = document.getElementById("myChart");*@
        var myChart = new Chart(ctx, {
            type: 'line',
            data:
        {
        labels: mydateArr,
                datasets: [{
            label: myregArr,
                    data: mycostArr,
                    backgroundColor: [
                                'rgba(255, 99, 132, 0.2)',
                                'rgba(54, 162, 235, 0.2)',
                                'rgba(255, 206, 86, 0.2)',
                                'rgba(75, 192, 192, 0.2)',
                                'rgba(153, 102, 255, 0.2)',
                                'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                                'rgba(255,99,132,1)',
                                'rgba(54, 162, 235, 1)',
                                'rgba(255, 206, 86, 1)',
                                'rgba(75, 192, 192, 1)',
                                'rgba(153, 102, 255, 1)',
                                'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            },


            options:
        {
        legend: { labels: { fontColor: "#E5E4E2"} },
                title: { display: true, text: 'Fuel Unit Prices', fontColor: "#E5E4E2", fontSize: 18 },

                scales:
            {

            yAxes: [
                        {
                id: 'y-axis-1',
                            display: true,
                            position: 'left',
                            ticks:
                    {
                        fontColor: "#E5E4E2",
                            },
                            scaleLabel:
                                
                    {
                    display: true,
                                labelString: 'Fuel Unit Price',
                                fontColor: "#E5E4E2"
                        
                            }

                }
                    ],

                   xAxes: [
                        {
                            id: 'x-axis-1',
                            display: true,
                            position: 'bottom',
                            ticks:
                    {
                    fontColor: "#E5E4E2",
                            },
                            scaleLabel:
                    {
                    display: true,
                                labelString: 'Date',
                                fontColor: "#E5E4E2"
                            }
                }
                    ],
                }
        }
    });

</script>
}




@*Fuel Costs Graph*@

<div id="myArrayCostsFuel" style="display:none">
    @{
    if (Model.Count() > 0)      //to overcome issue when model has No Values
    {
        var myArrCosts = "";
        var arrayListCosts = Model.OrderBy(i => i.FuelDate).Select(i => i.FuelCost).ToArray();
        foreach (var item in arrayListCosts)
        {
            myArrCosts += @item.ToString() + ",";
        }

        myArrCosts = myArrCosts.Substring(0, myArrCosts.Length - 1) + "";
        @Html.DisplayFor(m => myArrCosts);
    }
}
</div>


<div id="myArrayDatesFuel" style="display:none">
    @{
        if (Model.Count() > 0)      //to overcome issue when model has No Values
        {
            var myArrDates = "";
            var arrayListDates = Model.OrderBy(i => i.FuelDate).Select(i => i.FuelDate).ToArray();
            foreach (var item in arrayListDates)
            {
                myArrDates += @item.ToShortDateString().ToString() + ",";
            }
            myArrDates = myArrDates.Substring(0, myArrDates.Length - 1) + "";
            @Html.DisplayFor(m => myArrDates);
        }
    }
    </div>

    <div id="myArrayRegFuel" style="display:none">
        @{
            if (Model.Count() > 0)      //to overcome issue when model has No Values
            {
                var myArrReg = "";
                var arrayListReg = Model.OrderBy(i => i.FuelDate).Select(i => i.Vehicle.VehicleRegistrationNumber).Distinct().ToArray();     //Distinct used to select dinstinct Vehicles
                foreach (var item in arrayListReg)
                {
                    myArrReg += @item.ToString() + ",";
                }
                myArrReg = myArrReg.Substring(0, myArrReg.Length - 1) + "";
                @Html.DisplayFor(m => myArrReg);
            }
        }
    </div>



@*Graphs to ONLY be seen by paid users*@
@if (Model.FirstOrDefault().StripeToken != null)
{
    <canvas id="myChartFuel" width="400" height="150"></canvas>
    <script>
            /*
                    var colmArray = new Array()
                    colmArray.push(100);
                    colmArray.push(1000);

                     var description = new Array();
                    description.push('a');
                     description.push('b');
                     */

            //Takes the CostRunningCost list and splits them out into an array list
            var mycostArr = new Array();
            costValues = $('#myArrayCostsFuel').text();
            mycostArr = costValues.split(",");

            //Takes the CostDate list and splits them out into an array list
            var mydateArr = new Array();
            dateValues = $('#myArrayDatesFuel').text();
            mydateArr = dateValues.split(",");

            //Takes the VehicleRegistrationNumber list and splits them out into an array list
            var myregArr = new Array();
            regValues = $('#myArrayRegFuel').text();
            myregArr = regValues.split(",");


            var ctx = "myChartFuel";
            @*var ctx = document.getElementById("myChart");*@
        var myChart = new Chart(ctx, {
            type: 'line',
            data:
        {
        labels: mydateArr,
                datasets: [{
            label: myregArr,
                    data: mycostArr,
                    backgroundColor: [
                                'rgba(255, 99, 132, 0.2)',
                                'rgba(54, 162, 235, 0.2)',
                                'rgba(255, 206, 86, 0.2)',
                                'rgba(75, 192, 192, 0.2)',
                                'rgba(153, 102, 255, 0.2)',
                                'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                                'rgba(255,99,132,1)',
                                'rgba(54, 162, 235, 1)',
                                'rgba(255, 206, 86, 1)',
                                'rgba(75, 192, 192, 1)',
                                'rgba(153, 102, 255, 1)',
                                'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            },


            options:
        {
        legend: { labels: { fontColor: "#E5E4E2"} },
                title: { display: true, text: 'Fuel Costs', fontColor: "#E5E4E2", fontSize: 18 },

                scales:
            {

            yAxes: [
                        {
                id: 'y-axis-1',
                            display: true,
                            position: 'left',
                            ticks:
                    {
                    fontColor: "#E5E4E2"
                            },
                            scaleLabel:
                    {
                    display: true,
                                labelString: 'Fuel Cost',
                                fontColor: "#E5E4E2"
                            }

                }
                    ],

                   xAxes: [
                        {
                id: 'x-axis-1',
                            display: true,
                            position: 'bottom',
                            ticks:
                    {
                    fontColor: "#E5E4E2"
                            },
                            scaleLabel:
                    {
                    display: true,
                                labelString: 'Date',
                                fontColor: "#E5E4E2"
                            }
                }
                    ],
                }
        }
    });

</script>
}