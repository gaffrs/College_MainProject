@model IEnumerable<VehicleAppMVC.Models.Cost>


<table class="table-condensed" width="350" align="right" style="background-color :lightslategray">
 <tr>
        <th>
            Cost statistics
        </th>
    </tr>
    <tr>
        <th></th>
        <th>
            Total
        </th>

        <th>
            Average
        </th>

        <th>
            Highest @*Max*@
        </th>
        <th>
            Lowest @*Min*@
        </th>
    <tr>

    <tr>
        <th>
            Cost
            @(@Model.FirstOrDefault() == null ? "" : @Model.Select(x => x.Vehicle.Consumption[0]).FirstOrDefault().ToString())
            :
        </th>
        <th>
            @*CG: Calculate Total Cost for the View*@
            @Model.Sum(x => x.CostRunningCost)
        </th>

        <th>
            @*CG: Calculate Average Cost for the View*@
            @(@Model.FirstOrDefault() == null ? "" : @Model.Select(x => x.CostRunningCost).Average().ToString("#.##"))      @**€@Model.Select(x => x.CostRunningCost).Average().ToString("#.##") *@        
        </th>

        <th>
            @*CG: Calculate Max Cost for the View*@
            @(@Model.FirstOrDefault() == null ? "" : @Model.Select(x => x.CostRunningCost).Max().ToString("#.##"))          @*€@Model.Select(x => x.CostRunningCost).Max().ToString("#.##")*@
        </th >

        <th>
            @*CG: Calculate Min Cost for the View*@
            @(@Model.FirstOrDefault() == null ? "" : @Model.Select(x => x.CostRunningCost).Min().ToString("#.##") )         @*€@Model.Select(x => x.CostRunningCost).Min().ToString("#.##")*@
        </th>
    </tr>

    <tr></tr>
</table>



@{
    ViewBag.Title = "Cost List";
}

<h2>@ViewBag.Title</h2>

<p>
    @Html.ActionLink("Add Cost", "Create")
</p>

@*Add a Search Box*@
@using (Html.BeginForm())
{
    <p>
        @Html.TextBox("SearchString")
        <input type="submit" value="Search by Registration/Description/Year" />
    </p>
    <p>
        @Html.TextBox("StartDate", "Start Date", new { @class = "date-picker" })  @Html.TextBox("FinishDate", "Finish Date", new { @class = "date-picker" })
        <input type="submit" value="Search by Date Range" />
    </p>
}

@*Find by Title or Registration: @Html.EnumDropDownListFor(CostTitle)*@

<table class="table">
    <tr>
        <th>
            @Html.ActionLink("Vehicle Registration", "Index", new { sortOrder = ViewBag.NameSortParmReg })      @*CG: Edited*@
            @*@Html.DisplayNameFor(model => model.Vehicle.ApplicationUserId)*@
        </th>
        @*New for sorting*@
        <th>
            @Html.ActionLink("Cost Description", "Index", new { sortOrder = ViewBag.NameSortParmTitle })
        </th>
        <th>
            @Html.ActionLink("Cost Date", "Index", new { sortOrder = ViewBag.DateSortParmDate })
        </th>

        @*
            @Html.DisplayNameFor(model => model.Vehicle.VehicleRegistrationNumber)      @*CG: Edited*@
        @*@Html.DisplayNameFor(model => model.Vehicle.ApplicationUserId)*@
        @*
            <th>
                @Html.DisplayNameFor(model => model.CostTitle)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CostDate)
            </th>
        *@
        <th>
            @Html.DisplayNameFor(model => model.CostOdometerMileage)
            @(@Model.FirstOrDefault() == null ? "" : @Model.Select(x => x.Vehicle.Consumption[1]).FirstOrDefault().ToString())
        </th>
        <th>
            @Html.DisplayNameFor(model => model.CostRunningCost)
            @(@Model.FirstOrDefault() == null ? "" : @Model.Select(x => x.Vehicle.Consumption[0]).FirstOrDefault().ToString())
        </th>


                @*
        <th>
            @Html.DisplayNameFor(model => model.CostTotalRunningCost)
            @(@Model.FirstOrDefault() == null ? "" : @Model.Select(x => x.Vehicle.Consumption[0]).FirstOrDefault().ToString())
        </th>
        @Model.Sum(x => x.CostRunningCost)*@
        <th></th>
    </tr>

    @foreach (var item in Model)
    {

        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Vehicle.VehicleRegistrationNumber)       @*CG: Edited*@
                @*@Html.DisplayFor(modelItem => item.Vehicle.ApplicationUserId)*@
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CostTitle)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CostDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CostOdometerMileage)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CostRunningCost)
            </td>
            <td>
                @*@Html.DisplayFor(modelItem => item.CostTotalRunningCost)*@
                @*@Model.Sum(x => x.CostRunningCost)*@
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.CostID }) |
                @Html.ActionLink("Details", "Details", new { id = item.CostID }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.CostID })
            </td>
        </tr>
        }

</table>




@Model.Select(s => s.CostRunningCost).ToArray()

return f;


<canvas id="myChart" width="400" height="200"></canvas>
<script>

    var description = new Array();
    description.push('a');
    description.push('b');
    var myvalues = new Array();
    myvalues.push(1);
    myvalues.push(10);

    var costs = new Array(costs)
    

    var ctx = "myChart";
    @*var ctx = document.getElementById("myChart");*@
var myChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: ["Red", "Blue", "Yellow", "Green", "Purple", "Orange"],
            datasets: [{
                label: description,
                data: myvalues,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(255, 206, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(255, 159, 64, 0.2)'
                ],
                borderColor: [
                    'rgba(255,99,132,1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(255, 206, 86, 1)',
                    'rgba(75, 192, 192, 1)',
                    'rgba(153, 102, 255, 1)',
                    'rgba(255, 159, 64, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }
    });
</script>


@*
    @{
        var myChart = new Chart(width: 600, height: 400, theme: ChartTheme.Green)
            .AddTitle("Chart Title")
            .AddSeries(
                name: "ChartTitle",
                xValue: new[] { "Col1", "Col2", "Col3", "Col4", "Col5" },
                yValues: new[] { "2", "6", "4", "5", "3" })
            .Write();
    }
*@



        @{
            ViewBag.Title = "Scatter Chart in MVC";
        }
        <script type="text/javascript" src="https://www.google.com/jsapi"></script>
        <script type="text/javascript">
            google.load("visualization", "1", { packages: ["corechart"] });
            google.setOnLoadCallback(drawChart);
            function drawChart() {
                // Create and populate the data table.
                var Sale = xxx@*[@Model.SaleValue]*@;
                var Purchase = yyy @*[@Model.PurchaseValue]*@;

                var data = new google.visualization.DataTable();
                data.addColumn('number', 'colmx@*@Model.SaleTitle*@');
                data.addColumn('number', 'colmy @*@Model.SaleTitle*@');
                for (i = 0; i < Sale.length; i++) {
                    data.addRow([Sale[i], Purchase[i]]);
                }

                var options = {
                    title: 'Sale vs. Purchase Data',
                    hAxis: { title: 'Sale', minValue: 0, maxValue: colm @*@Model.SaleValue*@ },
                    vAxis: { title: 'Purchase', minValue: 0, maxValue: yyy @*@Model.PurchaseValue*@ },
                    legend: 'none',

                };

                var chart = new google.visualization.ScatterChart(document.getElementById('divchart'));
                chart.draw(data, options);
            }
        </script>
        <div id="divchart" style="width: 400px; height: 200px;">
        </div>
