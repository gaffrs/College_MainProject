@model IEnumerable<VehicleAppMVC.Models.Cost>

<table class="table-condensed" width="350" align="right" style="background-color :lightslategray">
    <tr>
        <th>
            Cost statistics
        </th>
    </tr>
    <tr>
        <th></th>
        <th>
            Total
        </th>

        <th>
            Average
        </th>

        <th>
            Highest @*Max*@
        </th>
        <th>
            Lowest @*Min*@
        </th>
    <tr>

    <tr>
        <th>
            Cost
            @(@Model.FirstOrDefault() == null ? "" : @Model.Select(x => x.Vehicle.Consumption[0]).FirstOrDefault().ToString())
            :
        </th>
        <th>
            @*CG: Calculate Total Cost for the View*@
            @Model.Sum(x => x.CostRunningCost)
        </th>

        <th>
            @*CG: Calculate Average Cost for the View*@
            @(@Model.FirstOrDefault() == null ? "" : @Model.Select(x => x.CostRunningCost).Average().ToString("#.##"))      @**€@Model.Select(x => x.CostRunningCost).Average().ToString("#.##") *@
        </th>

        <th>
            @*CG: Calculate Max Cost for the View*@
            @(@Model.FirstOrDefault() == null ? "" : @Model.Select(x => x.CostRunningCost).Max().ToString("#.##"))          @*€@Model.Select(x => x.CostRunningCost).Max().ToString("#.##")*@
        </th>

        <th>
            @*CG: Calculate Min Cost for the View*@
            @(@Model.FirstOrDefault() == null ? "" : @Model.Select(x => x.CostRunningCost).Min().ToString("#.##") )         @*€@Model.Select(x => x.CostRunningCost).Min().ToString("#.##")*@
        </th>
    </tr>

    <tr></tr>
</table>



@{
    ViewBag.Title = "Cost List";
}

<h2>@ViewBag.Title</h2>

<p>
    @Html.ActionLink("Add Cost", "Create")
</p>

@*Add a Search Box*@
@using (Html.BeginForm())
{
    <p>
        @Html.TextBox("SearchString")
        <input type="submit" value="Search by Registration/Description/Year" />
    </p>
    <p>
        @Html.TextBox("StartDate", "Start Date", new { @class = "date-picker" })  @Html.TextBox("FinishDate", "Finish Date", new { @class = "date-picker" })
        <input type="submit" value="Search by Date Range" />
    </p>
}

@*Find by Title or Registration: @Html.EnumDropDownListFor(CostTitle)*@

<table class="table">
    <tr>
        <th>
            @Html.ActionLink("Vehicle Registration", "Index", new { sortOrder = ViewBag.NameSortParmReg })      @*CG: Edited*@
            @*@Html.DisplayNameFor(model => model.Vehicle.ApplicationUserId)*@
        </th>
        @*New for sorting*@
        <th>
            @Html.ActionLink("Cost Description", "Index", new { sortOrder = ViewBag.NameSortParmTitle })
        </th>
        <th>
            @Html.ActionLink("Cost Date", "Index", new { sortOrder = ViewBag.DateSortParmDate })
        </th>

        @*
            @Html.DisplayNameFor(model => model.Vehicle.VehicleRegistrationNumber)      @*CG: Edited*@
        @*@Html.DisplayNameFor(model => model.Vehicle.ApplicationUserId)*@
        @*
            <th>
                @Html.DisplayNameFor(model => model.CostTitle)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CostDate)
            </th>
        *@
        <th>
            @Html.DisplayNameFor(model => model.CostOdometerMileage)
            @(@Model.FirstOrDefault() == null ? "" : @Model.Select(x => x.Vehicle.Consumption[1]).FirstOrDefault().ToString())
        </th>
        <th>
            @Html.DisplayNameFor(model => model.CostRunningCost)
            @(@Model.FirstOrDefault() == null ? "" : @Model.Select(x => x.Vehicle.Consumption[0]).FirstOrDefault().ToString())
        </th>


        @*
            <th>
                @Html.DisplayNameFor(model => model.CostTotalRunningCost)
                @(@Model.FirstOrDefault() == null ? "" : @Model.Select(x => x.Vehicle.Consumption[0]).FirstOrDefault().ToString())
            </th>
            @Model.Sum(x => x.CostRunningCost)*@
        <th></th>
    </tr>

    @foreach (var item in Model)
    {

        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Vehicle.VehicleRegistrationNumber)       @*CG: Edited*@
                @*@Html.DisplayFor(modelItem => item.Vehicle.ApplicationUserId)*@
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CostTitle)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CostDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CostOdometerMileage)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CostRunningCost)
            </td>
            <td>
                @*@Html.DisplayFor(modelItem => item.CostTotalRunningCost)*@
                @*@Model.Sum(x => x.CostRunningCost)*@
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.CostID }) |
                @Html.ActionLink("Details", "Details", new { id = item.CostID }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.CostID })
            </td>
        </tr>
    }

</table>



    <div id="myArrayCosts">@{
        if (Model.Count() > 0)      //to overcome issue when model has No Values
        {
            var myArrCosts = "";
            var arrayListCosts = Model.Select(i => i.CostRunningCost).ToArray();
            foreach (var item in arrayListCosts)
            {
                myArrCosts += @item.ToString() + ",";
            }

            myArrCosts = myArrCosts.Substring(0, myArrCosts.Length - 1) + "";
            @Html.DisplayFor(m => myArrCosts);
        }
        }
    </div>


<div id="myArrayDates">
    @{
        if (Model.Count() > 0)      //to overcome issue when model has No Values
        {
            var myArrDates = "";
            var arrayListDates = Model.Select(i => i.CostDate).ToArray();
            foreach (var item in arrayListDates)
            {
                myArrDates += @item.ToShortDateString().ToString() + ",";
            }
            myArrDates = myArrDates.Substring(0, myArrDates.Length - 1) + "";
            @Html.DisplayFor(m => myArrDates);
        }
        }
</div>

<div id="myArrayReg">
    @{
        if (Model.Count() > 0)      //to overcome issue when model has No Values
        {
            var myArrReg = "";
            var arrayListReg = Model.Select(i => i.Vehicle.VehicleRegistrationNumber).Distinct().ToArray();     //Distinct used to select dinstinct Vehicles
            foreach (var item in arrayListReg)
            {
                myArrReg += @item.ToString() + ",";
            }
            myArrReg = myArrReg.Substring(0, myArrReg.Length - 1) + "";
            @Html.DisplayFor(m => myArrReg);
        }
        }
</div>




<canvas id="myChart" width="400" height="200"></canvas>
    <script>
        /*
                var colmArray = new Array()
                colmArray.push(100);
                colmArray.push(1000);

                 var description = new Array();
                description.push('a');
                 description.push('b');
                 */

        //Takes the CostRunningCost list and splits them out into an array list
        var mycostArr = new Array();
        costValues = $('#myArrayCosts').text();
        mycostArr = costValues.split(",");

        //Takes the CostDate list and splits them out into an array list
        var mydateArr = new Array();
        dateValues = $('#myArrayDates').text();
        mydateArr = dateValues.split(",");

        //Takes the VehicleRegistrationNumber list and splits them out into an array list
        var myregArr = new Array();
        regValues = $('#myArrayReg').text();
        myregArr = regValues.split(",");


        var ctx = "myChart";
        @*var ctx = document.getElementById("myChart");*@
        var myChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: mydateArr,
                datasets: [{
                    label: myregArr,
                    data: mycostArr,
                    backgroundColor: [
                                'rgba(255, 99, 132, 0.2)',
                                'rgba(54, 162, 235, 0.2)',
                                'rgba(255, 206, 86, 0.2)',
                                'rgba(75, 192, 192, 0.2)',
                                'rgba(153, 102, 255, 0.2)',
                                'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                                'rgba(255,99,132,1)',
                                'rgba(54, 162, 235, 1)',
                                'rgba(255, 206, 86, 1)',
                                'rgba(75, 192, 192, 1)',
                                'rgba(153, 102, 255, 1)',
                                'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });
</script>


                @*
                    @{
                        var myChart = new Chart(width: 600, height: 400, theme: ChartTheme.Green)
                            .AddTitle("Chart Title")
                            .AddSeries(
                                name: "ChartTitle",
                                xValue: new[] { "Col1", "Col2", "Col3", "Col4", "Col5" },
                                yValues: new[] { "2", "6", "4", "5", "3" })
                            .Write();
                    }
                *@


